# main.py
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ config.py
from config import TELEGRAM_TOKEN, RENTPROG_API_KEY

# –ù–ê–°–¢–†–û–ô–ö–ê API
RENTPROG_API_URL = 'https://rentprog.ru/api/v1/vehicles'

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(_name_)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    welcome_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ RentGo. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–Ω—ã.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cars, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ."
    )
    await update.message.reply_text(welcome_message)

async def get_cars(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üîç –ò—â—É –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –±–∞–∑–µ RentGo, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    params = {'api_key': RENTPROG_API_KEY}

    try:
        response = requests.get(RENTPROG_API_URL, params=params, timeout=15)
        response.raise_for_status()

        response_data = response.json()
        cars_list = response_data.get('data')

        if not cars_list:
            await update.message.reply_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.")
            return

        await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(cars_list)}")

        for car in cars_list:
            mark = car.get('mark', '–ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
            model = car.get('model', '–ú–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            year = car.get('year', '')
            price = car.get('price', '??')

            car_info = (
                f"<b>{mark} {model}</b> ({year} –≥.)\n\n"
                f"–°—Ç–∞—Ç—É—Å: {car.get('status', {}).get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å—É—Ç–∫–∏: <b>{price} ‚ÇΩ</b>"
            )

            photo_url = None
            photos = car.get('photos')
            if photos and len(photos) > 0:
                photo_url = photos[0].get('url')

            if photo_url:
                await update.message.reply_photo(photo=photo_url, caption=car_info, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(text=car_info, parse_mode=ParseMode.HTML)

    except requests.exceptions.HTTPError as e:
        logger.error(f"–û–®–ò–ë–ö–ê HTTP: {e}")
        await update.message.reply_text(f"‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: {e.response.status_code} {e.response.reason}.")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cars", get_cars))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if _name_ == '_main_':
    main()
